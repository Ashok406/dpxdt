Hosted pdiff
API server you post to with a description like:

- build name
- release name
- common code to define across all tests
  - can be remote resources?
- list of:
  - test name
  - host-prefix A
  - host-prefix B
  - relative URL to test
  - Code to run on both
  - username/password using HTTP basic auth
  - header key/value pairs
  - css selectors to hide
  - screen size (for responsive CSS)
  - User agent spoofing (can just do this with headers?)
- API key
- email address
- callback URL

- returns a polling status ID, candidate ID, and URL to fetch for results

All screenshots deleted after 3 days unless you're in pro mode.


Candidate ID is auto-allocated, always increasing.


Website hosts a pdiff.

Bisect mode shows all diffs in a timeline, lets you quickly scan through the list to find where something changed.

500 errors automatically retried up to N times.

Sends an email on failure or success, depending on config.

Can be hooked into a github commit callback for pages.

The callback URL would be a one-time URL that's preconfigured with a payload. As soon as a post comes in on that URL, it would diff against the old version. In this case you wouldn't have the old one still alive for contacting, so you'd just pdiff on the last screenshot with the same contents. If the config changed then you wouldn't be able to do it.

User impersonation.
- Need server-side support for user impersonation.
- Can pass special headers on request to emulate this.


How it works
- Server on EC2 that runs the binary with phantomjs and pdiff
- Server polls for work on the AE pull queue via a URL (https)
- Each server is provisioned with its own key to give it access to the URL; transmitted over basic auth
- Each build/release split into N tasks so they can be done in parallel
- Completion status done with POST of results to preformulated URL
- On each post we run a task to see if all posts are done
- Posts are ignored if they're repeats


Example use-cases
- diff my whole site; crawl a webpage, generate all URLs it contains, take a screenshot
  - do it again after a design change to compare it to the past and double-check what's changed
  - sitediff http://example.com/mysite --ignore '/foobar/stuff /meeper/blah'
  - space-separated ignore list
  - prefix is where to start the crawl for all URLs
  - only will look for HTML content types


Ordering for writing something useful:
1. Local client for running phantom JS and generating screenshots from config file
2. Server side for hosting images with API key provisioning
3. Have local client auto-post up to server side
  - Ship the whole log file back to the server side for debugging
4. Task queue system for workers and shared pool
5. Use spot instances to do the work


self-hosted version
1. Server could write to SQL to run behind the firewall
2. Allow workers to run locally for firewall traversal
