Backend
- Split site-diff to use server-side capture queue, so it can be much faster in aggregate
- Make runs-done callable twice, first time to register it will happen, second time to report an image
- Have all runs reported work even when the runs don't have an image

Frontend
- Create a new build crud; have config section for CSS to inject (to hide tweet buttons with changing counts, etc), prefixes to ignore, email address to notify
- View all releases in a build; highlights last good release, shows newest building release
- Look at all images in a release candidate; list of names and status (same, different)
- Compare mode, shows A vs. B of before and after; lets operator mark UI as acceptable or not; use hot-keys to quickly scroll through images


-------

Speculative outline:

Hosted pdiff

API server you post to with a description like:
- build name
- release name
- common code to define across all tests
  - can be remote resources?
- list of:
  - test name
  - host-prefix A
  - host-prefix B
  - relative URL to test
  - Code to run on both
  - username/password using HTTP basic auth
  - header key/value pairs
  - css selectors to hide
  - screen size (for responsive CSS)
  - User agent spoofing (can just do this with headers?)
- API key
- email address
- callback URL
- returns a polling status ID, candidate ID, and URL to fetch for results

Features:
- All screenshots deleted after 3 days unless you're in pro mode.
- 500 errors automatically retried up to N times.
- Sends an email on failure or success, depending on config.
- Can be hooked into a github commit callback for pages.


